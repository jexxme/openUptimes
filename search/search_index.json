{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"OpenUptimes","text":"<p> A simple, elegant, and self-hosted status page to monitor and display the uptime of your services. </p>"},{"location":"#monitor-your-services","title":"Monitor Your Services","text":"<p>Track the status of your websites, APIs, and services with a beautiful, modern interface. Keep your users informed about service availability.</p> Get Started Learn More"},{"location":"#flexible-monitoring","title":"Flexible Monitoring","text":"<p>Choose the monitoring approach that fits your needs:</p> <ul> <li>Internal Cron System - Precise control for self-hosted deployments</li> <li>GitHub Actions - Perfect for serverless platforms like Vercel</li> </ul>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li> <p>\ud83d\ude80 One-Click Deploy</p> <p>Deploy to Vercel in seconds with zero configuration</p> </li> <li> <p>\ud83d\udcc5 Dual Monitoring</p> <p>Choose between Internal Cron or GitHub Actions</p> </li> <li> <p>\ud83d\udcca Historical Data</p> <p>Track uptime patterns with rich visualizations</p> </li> <li> <p>\u2699\ufe0f Simple Admin</p> <p>Easy-to-use dashboard for configuration</p> </li> </ul>"},{"location":"#getting-started-in-4-steps","title":"Getting Started in 4 Steps","text":"1. Deploy2. Configure Redis3. Set up Monitoring4. Add Services <p>Click the \"Deploy with Vercel\" button and follow the prompts to set up your new project</p> <p> </p> <p>Set up Redis in your Vercel project using their one-click integration</p> <p>Choose your monitoring method based on your deployment type</p> <ul> <li>GitHub Actions (for Vercel)</li> <li>Internal Cron (for self-hosted)</li> </ul> <p>Add your services through the admin dashboard at <code>/admin</code></p> <p></p>"},{"location":"#who-is-it-for","title":"Who Is It For?","text":"<p>OpenUptimes is perfect for developers, teams, and businesses who need a simple but powerful status page without the complexity and cost of commercial solutions.</p> <ul> <li> <p>\ud83c\udfe2 Small to Medium Businesses</p> <p>Build customer trust with transparent service status</p> </li> <li> <p>\ud83d\udcbb Development Teams</p> <p>Communicate service status to users and stakeholders</p> </li> <li> <p>\ud83d\udc69\u200d\ud83d\udcbb Independent Developers</p> <p>Monitor personal projects with a professional interface</p> </li> <li> <p>\ud83c\udf10 Open Source Projects</p> <p>Show uptime transparency for community services</p> </li> </ul> <p> Learn More About OpenUptimes Installation Guide </p>"},{"location":"DEPLOYMENT/","title":"Deploying Documentation to GitHub Pages","text":"<p>This guide explains how to deploy the OpenUptimes documentation to GitHub Pages.</p>"},{"location":"DEPLOYMENT/#automatic-deployment","title":"Automatic Deployment","text":"<p>The documentation is automatically deployed to GitHub Pages whenever changes are pushed to the <code>main</code> branch that affect: - Files in the <code>docs/</code> directory - The <code>mkdocs.yml</code> configuration file - The GitHub Actions workflow file</p> <p>This is handled by the GitHub Actions workflow defined in <code>.github/workflows/documentation.yml</code>.</p>"},{"location":"DEPLOYMENT/#manual-deployment","title":"Manual Deployment","text":"<p>If you need to deploy the documentation manually:</p> <ol> <li>Ensure you have MkDocs Material installed:</li> </ol> <pre><code>pip install mkdocs-material\n</code></pre> <ol> <li>From the project root, run:</li> </ol> <pre><code>mkdocs gh-deploy --force\n</code></pre> <p>This command builds the documentation and pushes it to the <code>gh-pages</code> branch, which is then served by GitHub Pages.</p>"},{"location":"DEPLOYMENT/#deployment-settings","title":"Deployment Settings","text":"<p>The documentation is deployed to: <code>https://[username].github.io/openuptimes/</code></p>"},{"location":"DEPLOYMENT/#github-repository-settings","title":"GitHub Repository Settings","text":"<p>To ensure GitHub Pages works correctly:</p> <ol> <li>Go to your repository's Settings tab</li> <li>Navigate to Pages in the sidebar</li> <li>Under Source, select Deploy from a branch</li> <li>Select the gh-pages branch and / (root) folder</li> <li>Click Save</li> </ol>"},{"location":"DEPLOYMENT/#troubleshooting","title":"Troubleshooting","text":""},{"location":"DEPLOYMENT/#images-not-displaying","title":"Images Not Displaying","text":"<ul> <li>Ensure images are in the <code>docs/assets/</code> directory</li> <li>Check that image paths in markdown files are correct</li> <li>Use relative paths from the current markdown file (e.g., <code>../assets/image.png</code>)</li> </ul>"},{"location":"DEPLOYMENT/#styling-issues","title":"Styling Issues","text":"<ul> <li>Check that <code>extra_css</code> in <code>mkdocs.yml</code> points to the correct file</li> <li>Verify that custom CSS is compatible with MkDocs Material</li> <li>Test locally with <code>mkdocs serve</code> before deploying</li> </ul>"},{"location":"DEPLOYMENT/#deployment-failures","title":"Deployment Failures","text":"<ul> <li>Check the GitHub Actions workflow runs for errors</li> <li>Ensure the repository has the necessary permissions</li> <li>Verify that the <code>gh-pages</code> branch exists </li> </ul>"},{"location":"about/","title":"About OpenUptimes","text":""},{"location":"about/#what-is-openuptimes","title":"What is OpenUptimes?","text":"<p>OpenUptimes is a lightweight status page that helps you monitor and display service uptime. With a clean interface and flexible monitoring options, tracking your infrastructure's health has never been easier.</p> <p>Simplicity is key: deployment takes minutes, configuration is minimal, and monitoring is automatic. You have two options for monitoring services:</p> <ol> <li>Internal Cron System: For precise monitoring with complete control (ideal for self-hosted deployments)</li> <li>GitHub Actions: For low-maintenance monitoring with no additional infrastructure (ideal for Vercel deployments)</li> </ol> <p>Built with Next.js, Tailwind CSS, and Redis, OpenUptimes offers a seamless experience across devices. It provides reliable uptime checks without requiring complex external services.</p>"},{"location":"about/#why-openuptimes","title":"Why OpenUptimes?","text":"<p>There are many status page solutions available, but OpenUptimes stands out for its:</p> <ul> <li>\ud83d\ude80 One-click deploy - Get started in seconds with Vercel</li> <li>\ud83d\udd0c Zero configuration - Everything works out of the box</li> <li>\u23f1\ufe0f Dual monitoring systems:</li> <li>Internal Cron - Precise monitoring (down to 1-minute intervals) for self-hosted deployments</li> <li>GitHub Actions - Reliable, infrastructure-free monitoring ideal for serverless platforms</li> <li>\ud83d\udcca Comprehensive analytics - Track uptime performance with rich historical data</li> <li>\ud83d\udcdd Detailed history - View uptime trends and identify patterns over time</li> <li>\ud83d\udd14 Real-time status - See at a glance which services are operational</li> <li>\ud83d\uded1 Minimal dependencies - Only requires Redis and a hosting environment</li> <li>\ud83c\udfa8 Beautiful, responsive UI - Works perfectly on all devices</li> </ul>"},{"location":"about/#architecture","title":"Architecture","text":"<p>OpenUptimes consists of a few key components:</p> <ol> <li>Status Dashboard: Public-facing page showing service status</li> <li>Admin Interface: For managing services and settings</li> <li>Monitoring System: Choose between:</li> <li>Internal Cron System: For precise, self-hosted monitoring</li> <li>GitHub Actions: For serverless-compatible monitoring</li> <li>Redis Backend: Simple data storage for uptime data</li> <li>API Endpoints: For programmatic access to service status</li> </ol> <p></p> <p>The architecture is designed to be simple and effective:</p> <ol> <li>Monitoring triggers periodically check your services:</li> <li>GitHub Actions works for all deployment types</li> <li>Internal Cron System provides more precision for self-hosted deployments</li> <li>The ping API checks all services and updates Redis</li> <li>The frontend displays status data from Redis</li> <li>Admin users can configure services through the admin interface</li> </ol>"},{"location":"about/#who-should-use-openuptimes","title":"Who Should Use OpenUptimes?","text":"<p>OpenUptimes is ideal for:</p>"},{"location":"about/#small-to-medium-businesses","title":"Small to Medium Businesses","text":"<ul> <li>Create a professional status page with minimal effort</li> <li>Keep customers informed about service availability</li> <li>Build trust through transparency</li> </ul>"},{"location":"about/#development-teams","title":"Development Teams","text":"<ul> <li>Communicate service status to users and stakeholders</li> <li>Track historical performance across multiple services</li> <li>Integrate uptime monitoring into existing workflows</li> </ul>"},{"location":"about/#independent-developers","title":"Independent Developers","text":"<ul> <li>Monitor personal projects and services</li> <li>Provide a professional status interface for clients</li> <li>Low-maintenance solution that \"just works\"</li> </ul>"},{"location":"about/#open-source-projects","title":"Open Source Projects","text":"<ul> <li>Provide transparency about service uptime</li> <li>Easy community contribution with familiar technologies</li> <li>Free for non-commercial use</li> </ul>"},{"location":"about/#monitoring-options-in-detail","title":"Monitoring Options in Detail","text":"<p>OpenUptimes provides multiple ways to monitor your services:</p>"},{"location":"about/#internal-cron-system","title":"Internal Cron System","text":"<p>Key Features: - Built-in scheduler with precise timing - Down to 1-minute check intervals - Works on traditional hosting (not serverless) - Complete control through admin UI</p> <p>Best for: - Self-hosted deployments on traditional servers/VPS - Users who need precise timing - Teams that want complete control over monitoring</p> <p>Limitations: - Not compatible with serverless platforms like Vercel - Requires a persistent runtime environment - Uses resources from your OpenUptimes instance</p> <p>Learn more about the Internal Cron System</p>"},{"location":"about/#github-actions","title":"GitHub Actions","text":"<p>Key Features: - Uses GitHub's infrastructure - Minimum 5-minute intervals - Works with all deployment types - Perfect for serverless platforms</p> <p>Best for: - Deployments on serverless platforms like Vercel - Users who prefer a \"set and forget\" approach - Teams already familiar with GitHub Actions</p> <p>Limitations: - Minimum 5-minute intervals - Subject to GitHub's scheduling limitations - Requires a GitHub repository</p> <p>Learn more about GitHub Actions Monitoring</p>"},{"location":"about/#external-monitoring","title":"External Monitoring","text":"<p>Key Features: - Integrate with third-party systems - Custom intervals and locations - Additional monitoring redundancy</p> <p>Best for: - Global applications needing regional monitoring - Mission-critical services requiring redundant checks - Users with existing monitoring infrastructure</p> <p>Deployment Options: - Custom cron servers - Cloud-based cron services - Serverless functions - Existing monitoring platforms</p> <p>Learn more about External Monitoring Options </p>"},{"location":"github-actions-setup/","title":"Setting Up GitHub Actions for OpenUptimes Ping System","text":"<p>This document explains how to set up the GitHub Actions workflow to power the OpenUptimes ping system.</p>"},{"location":"github-actions-setup/#overview","title":"Overview","text":"<p>The OpenUptimes ping system uses GitHub Actions to schedule and execute regular ping checks of your monitored services. This approach offers several advantages:</p> <ul> <li>Reliable scheduling with GitHub's infrastructure</li> <li>Independent execution outside your application server</li> <li>Better handling of cold starts and server issues</li> <li>Detailed run history and logs in GitHub</li> </ul>"},{"location":"github-actions-setup/#setup-steps","title":"Setup Steps","text":""},{"location":"github-actions-setup/#1-repository-configuration","title":"1. Repository Configuration","text":"<ol> <li>Make sure your OpenUptimes application is in a GitHub repository</li> <li>The repository can be public or private</li> </ol>"},{"location":"github-actions-setup/#2-create-required-secrets","title":"2. Create Required Secrets","text":"<ol> <li>Go to your repository on GitHub</li> <li>Navigate to Settings &gt; Secrets and variables &gt; Actions</li> <li>Add the following secrets:</li> <li><code>PING_API_KEY</code>: A secure random string to authenticate ping requests (you define this)</li> </ol>"},{"location":"github-actions-setup/#3-add-repository-variables","title":"3. Add Repository Variables","text":"<ol> <li>In the same section, go to the Variables tab</li> <li>Add the following variable:</li> <li><code>APP_URL</code>: The full URL to your deployed OpenUptimes application (e.g., <code>https://status.example.com</code>)</li> </ol>"},{"location":"github-actions-setup/#4-github-actions-workflow-file","title":"4. GitHub Actions Workflow File","text":"<p>The application includes a <code>.github/workflows/ping.yml</code> file that defines the workflow. This file should already be in your repository.</p> <p>Key configurations in the workflow file: - Schedule: Defined by the cron expression in the <code>on.schedule</code> section - Authentication: Uses the <code>PING_API_KEY</code> secret - Application URL: Uses the <code>APP_URL</code> variable</p>"},{"location":"github-actions-setup/#5-application-configuration","title":"5. Application Configuration","text":"<ol> <li>Go to the Ping Debug page in your OpenUptimes application</li> <li>Configure the GitHub Actions settings:</li> <li>Schedule: The cron expression for your desired check frequency (e.g., <code>*/5 * * * *</code> for every 5 minutes)</li> <li>Repository: Your repository name (e.g., <code>username/openuptimes</code>)</li> <li>Workflow: The name of the workflow file (default: <code>ping.yml</code>)</li> <li>Secret Name: The name of the secret containing the API key (default: <code>PING_API_KEY</code>)</li> <li>Enabled: Toggle to enable/disable GitHub Actions scheduling</li> </ol>"},{"location":"github-actions-setup/#6-manually-trigger-a-workflow-run","title":"6. Manually Trigger a Workflow Run","text":"<p>To test your setup: 1. Go to the Actions tab in your GitHub repository 2. Select the \"OpenUptimes Ping Check\" workflow 3. Click \"Run workflow\" and then \"Run workflow\" again to confirm 4. Check the logs to ensure the ping was successful</p>"},{"location":"github-actions-setup/#troubleshooting","title":"Troubleshooting","text":""},{"location":"github-actions-setup/#common-issues","title":"Common Issues","text":"<ol> <li>Workflow not running on schedule</li> <li>GitHub may delay scheduled workflows during periods of high demand</li> <li> <p>Ensure your repository has activity; GitHub may disable schedules for inactive repositories</p> </li> <li> <p>HTTP errors in workflow logs</p> </li> <li>Verify your <code>APP_URL</code> is correct and accessible from the internet</li> <li> <p>Check that your application is running and the ping endpoint is accessible</p> </li> <li> <p>Authentication failures</p> </li> <li>Ensure the <code>PING_API_KEY</code> secret matches what your application expects</li> </ol>"},{"location":"github-actions-setup/#viewing-logs","title":"Viewing Logs","text":"<ol> <li>Go to the Actions tab in your GitHub repository</li> <li>Click on any workflow run</li> <li>Expand the \"Ping Service Check\" job</li> <li>View the \"Perform Ping\" step to see detailed logs</li> </ol>"},{"location":"github-actions-setup/#additional-resources","title":"Additional Resources","text":"<ul> <li>GitHub Actions Documentation</li> <li>Cron Syntax Reference</li> <li>GitHub Actions Environments and Secrets </li> </ul>"},{"location":"api/endpoints/","title":"API Endpoints","text":"<p>OpenUptimes provides several API endpoints for monitoring and configuring services. This page documents all available endpoints and their usage.</p>"},{"location":"api/endpoints/#authentication","title":"Authentication","text":"<p>Some API endpoints require authentication. You can authenticate using a token in the <code>Authorization</code> header:</p> <pre><code>Authorization: Bearer YOUR_API_KEY\n</code></pre> <p>To generate an API key, go to the admin dashboard and visit the API Keys section.</p>"},{"location":"api/endpoints/#core-monitoring-endpoints","title":"Core Monitoring Endpoints","text":""},{"location":"api/endpoints/#ping-services","title":"Ping Services","text":"<p>Actively checks the status of all configured services and stores results in Redis.</p> <pre><code>GET /api/ping\n</code></pre>"},{"location":"api/endpoints/#headers","title":"Headers","text":"<ul> <li><code>Authorization: Bearer YOUR_API_KEY</code> (required)</li> </ul>"},{"location":"api/endpoints/#response","title":"Response","text":"<pre><code>{\n  \"success\": true,\n  \"timestamp\": 1627987654321,\n  \"duration\": 1234,\n  \"services\": [\n    {\n      \"name\": \"Example Service\",\n      \"url\": \"https://example.com\",\n      \"status\": \"up\",\n      \"responseTime\": 123,\n      \"timestamp\": 1627987654321\n    }\n  ]\n}\n</code></pre>"},{"location":"api/endpoints/#get-service-status","title":"Get Service Status","text":"<p>Retrieves the current status of all services.</p> <pre><code>GET /api/status\n</code></pre>"},{"location":"api/endpoints/#response_1","title":"Response","text":"<pre><code>{\n  \"overall\": \"up\",\n  \"updated\": 1627987654321,\n  \"services\": [\n    {\n      \"name\": \"Example Service\",\n      \"description\": \"An example service\",\n      \"status\": \"up\",\n      \"lastChecked\": 1627987654321,\n      \"responseTime\": 123\n    }\n  ]\n}\n</code></pre>"},{"location":"api/endpoints/#get-service-history","title":"Get Service History","text":"<p>Retrieves historical data for a specific service.</p> <pre><code>GET /api/history/{serviceName}\n</code></pre>"},{"location":"api/endpoints/#parameters","title":"Parameters","text":"<ul> <li><code>serviceName</code>: The name of the service to get history for</li> </ul>"},{"location":"api/endpoints/#response_2","title":"Response","text":"<pre><code>{\n  \"name\": \"Example Service\",\n  \"history\": [\n    {\n      \"timestamp\": 1627987654321,\n      \"status\": \"up\",\n      \"responseTime\": 123\n    }\n  ]\n}\n</code></pre>"},{"location":"api/endpoints/#service-management-endpoints","title":"Service Management Endpoints","text":""},{"location":"api/endpoints/#list-services","title":"List Services","text":"<p>Lists all configured services.</p> <pre><code>GET /api/services\n</code></pre>"},{"location":"api/endpoints/#headers_1","title":"Headers","text":"<ul> <li><code>Authorization: Bearer YOUR_API_KEY</code> (required)</li> </ul>"},{"location":"api/endpoints/#response_3","title":"Response","text":"<pre><code>{\n  \"services\": [\n    {\n      \"name\": \"Example Service\",\n      \"url\": \"https://example.com\",\n      \"description\": \"An example service\",\n      \"expectedStatus\": 200,\n      \"method\": \"GET\",\n      \"timeout\": 10000\n    }\n  ]\n}\n</code></pre>"},{"location":"api/endpoints/#add-service","title":"Add Service","text":"<p>Adds a new service to monitor.</p> <pre><code>POST /api/services\n</code></pre>"},{"location":"api/endpoints/#headers_2","title":"Headers","text":"<ul> <li><code>Content-Type: application/json</code></li> <li><code>Authorization: Bearer YOUR_API_KEY</code> (required)</li> </ul>"},{"location":"api/endpoints/#request-body","title":"Request Body","text":"<pre><code>{\n  \"name\": \"New Service\",\n  \"url\": \"https://example.com\",\n  \"description\": \"A new service to monitor\",\n  \"expectedStatus\": 200,\n  \"method\": \"GET\",\n  \"timeout\": 10000\n}\n</code></pre>"},{"location":"api/endpoints/#response_4","title":"Response","text":"<pre><code>{\n  \"success\": true,\n  \"service\": {\n    \"name\": \"New Service\",\n    \"url\": \"https://example.com\",\n    \"description\": \"A new service to monitor\",\n    \"expectedStatus\": 200,\n    \"method\": \"GET\",\n    \"timeout\": 10000\n  }\n}\n</code></pre>"},{"location":"api/endpoints/#update-service","title":"Update Service","text":"<p>Updates an existing service.</p> <pre><code>PUT /api/services?name={serviceName}\n</code></pre>"},{"location":"api/endpoints/#headers_3","title":"Headers","text":"<ul> <li><code>Content-Type: application/json</code></li> <li><code>Authorization: Bearer YOUR_API_KEY</code> (required)</li> </ul>"},{"location":"api/endpoints/#parameters_1","title":"Parameters","text":"<ul> <li><code>serviceName</code>: The name of the service to update</li> </ul>"},{"location":"api/endpoints/#request-body_1","title":"Request Body","text":"<pre><code>{\n  \"name\": \"Updated Service\",\n  \"url\": \"https://example.com\",\n  \"description\": \"An updated service\",\n  \"expectedStatus\": 200,\n  \"method\": \"GET\",\n  \"timeout\": 10000\n}\n</code></pre>"},{"location":"api/endpoints/#response_5","title":"Response","text":"<pre><code>{\n  \"success\": true,\n  \"service\": {\n    \"name\": \"Updated Service\",\n    \"url\": \"https://example.com\",\n    \"description\": \"An updated service\",\n    \"expectedStatus\": 200,\n    \"method\": \"GET\",\n    \"timeout\": 10000\n  }\n}\n</code></pre>"},{"location":"api/endpoints/#delete-service","title":"Delete Service","text":"<p>Deletes a service.</p> <pre><code>DELETE /api/services?name={serviceName}\n</code></pre>"},{"location":"api/endpoints/#headers_4","title":"Headers","text":"<ul> <li><code>Authorization: Bearer YOUR_API_KEY</code> (required)</li> </ul>"},{"location":"api/endpoints/#parameters_2","title":"Parameters","text":"<ul> <li><code>serviceName</code>: The name of the service to delete</li> </ul>"},{"location":"api/endpoints/#response_6","title":"Response","text":"<pre><code>{\n  \"success\": true,\n  \"message\": \"Service deleted\"\n}\n</code></pre>"},{"location":"api/endpoints/#history-management-endpoints","title":"History Management Endpoints","text":""},{"location":"api/endpoints/#get-ttl-setting","title":"Get TTL Setting","text":"<p>Retrieves the current TTL (Time To Live) setting for history data.</p> <pre><code>GET /api/ping-history/ttl\n</code></pre>"},{"location":"api/endpoints/#headers_5","title":"Headers","text":"<ul> <li><code>Authorization: Bearer YOUR_API_KEY</code> (required)</li> </ul>"},{"location":"api/endpoints/#response_7","title":"Response","text":"<pre><code>{\n  \"ttl\": 86400,\n  \"unlimited\": false\n}\n</code></pre>"},{"location":"api/endpoints/#update-ttl-setting","title":"Update TTL Setting","text":"<p>Updates the TTL setting for history data.</p> <pre><code>PATCH /api/ping-history/ttl\n</code></pre>"},{"location":"api/endpoints/#headers_6","title":"Headers","text":"<ul> <li><code>Content-Type: application/json</code></li> <li><code>Authorization: Bearer YOUR_API_KEY</code> (required)</li> </ul>"},{"location":"api/endpoints/#request-body_2","title":"Request Body","text":"<pre><code>{\n  \"ttl\": 604800\n}\n</code></pre>"},{"location":"api/endpoints/#response_8","title":"Response","text":"<pre><code>{\n  \"success\": true,\n  \"ttl\": 604800,\n  \"unlimited\": false,\n  \"message\": \"History TTL set to 604800 seconds\"\n}\n</code></pre>"},{"location":"api/endpoints/#clear-history","title":"Clear History","text":"<p>Clears all ping history entries.</p> <pre><code>DELETE /api/ping-history\n</code></pre>"},{"location":"api/endpoints/#headers_7","title":"Headers","text":"<ul> <li><code>Authorization: Bearer YOUR_API_KEY</code> (required)</li> </ul>"},{"location":"api/endpoints/#response_9","title":"Response","text":"<pre><code>{\n  \"success\": true,\n  \"message\": \"Ping history cleared\"\n}\n</code></pre>"},{"location":"api/endpoints/#setup-and-configuration-endpoints","title":"Setup and Configuration Endpoints","text":""},{"location":"api/endpoints/#check-setup-status","title":"Check Setup Status","text":"<p>Checks if the initial setup has been completed.</p> <pre><code>GET /api/setup/status\n</code></pre>"},{"location":"api/endpoints/#response_10","title":"Response","text":"<pre><code>{\n  \"completed\": true\n}\n</code></pre>"},{"location":"api/endpoints/#complete-setup","title":"Complete Setup","text":"<p>Marks the setup as completed.</p> <pre><code>POST /api/setup/complete\n</code></pre>"},{"location":"api/endpoints/#headers_8","title":"Headers","text":"<ul> <li><code>Content-Type: application/json</code></li> <li><code>Authorization: Bearer YOUR_API_KEY</code> (required)</li> </ul>"},{"location":"api/endpoints/#response_11","title":"Response","text":"<pre><code>{\n  \"success\": true,\n  \"message\": \"Setup completed\"\n}\n</code></pre>"},{"location":"api/endpoints/#test-redis-connection","title":"Test Redis Connection","text":"<p>Tests if the Redis connection is working properly.</p> <pre><code>GET /api/test-redis\n</code></pre>"},{"location":"api/endpoints/#response_12","title":"Response","text":"<pre><code>{\n  \"connected\": true,\n  \"ping\": \"PONG\"\n}\n</code></pre>"},{"location":"api/endpoints/#error-responses","title":"Error Responses","text":"<p>All API endpoints return appropriate HTTP status codes along with error messages when applicable.</p> <p>Example error response:</p> <pre><code>{\n  \"error\": true,\n  \"message\": \"Service not found\",\n  \"status\": 404\n}\n</code></pre> <p>Common error codes:</p> <ul> <li><code>400 Bad Request</code>: Invalid request parameters</li> <li><code>401 Unauthorized</code>: Missing or invalid authentication</li> <li><code>403 Forbidden</code>: Insufficient permissions</li> <li><code>404 Not Found</code>: Resource not found</li> <li><code>429 Too Many Requests</code>: Rate limit exceeded</li> <li><code>500 Internal Server Error</code>: Server error </li> </ul>"},{"location":"development/contributing/","title":"Contributing to OpenUptimes","text":"<p>We welcome contributions to OpenUptimes! This document provides guidelines and instructions for contributing to the project.</p>"},{"location":"development/contributing/#getting-started","title":"Getting Started","text":""},{"location":"development/contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Node.js 18 or later</li> <li>Redis (local or remote)</li> <li>Git</li> </ul>"},{"location":"development/contributing/#setting-up-development-environment","title":"Setting Up Development Environment","text":"<ol> <li>Fork the repository on GitHub</li> <li>Clone your fork:</li> </ol> <pre><code>git clone https://github.com/your-username/openuptimes.git\ncd openuptimes\n</code></pre> <ol> <li>Install dependencies:</li> </ol> <pre><code>npm install\n</code></pre> <ol> <li>Set up your environment:</li> </ol> <pre><code>cp .env.example .env.local\n</code></pre> <ol> <li>Edit <code>.env.local</code> with your Redis connection:</li> </ol> <pre><code>REDIS_URL=redis://localhost:6379\nNEXT_PUBLIC_SITE_NAME=\"OpenUptimes Dev\"\nNEXT_PUBLIC_SITE_DESCRIPTION=\"Development Environment\"\nNEXT_PUBLIC_REFRESH_INTERVAL=60000\n</code></pre> <ol> <li>Start the development server:</li> </ol> <pre><code>npm run dev\n</code></pre>"},{"location":"development/contributing/#development-workflow","title":"Development Workflow","text":""},{"location":"development/contributing/#branching","title":"Branching","text":"<p>Follow these guidelines for branches:</p> <ul> <li><code>main</code>: Production-ready code</li> <li><code>dev</code>: Development branch for upcoming features</li> <li><code>feature/x</code>: Feature-specific branches</li> <li><code>bugfix/x</code>: Bug fix branches</li> </ul> <p>Always branch from <code>dev</code> for new features or bug fixes.</p>"},{"location":"development/contributing/#coding-style","title":"Coding Style","text":"<p>We use ESLint and Prettier to enforce coding standards. Ensure your code passes linting:</p> <pre><code>npm run lint\n</code></pre>"},{"location":"development/contributing/#testing","title":"Testing","text":"<p>Write tests for new features and ensure existing tests pass:</p> <pre><code>npm run test\n</code></pre>"},{"location":"development/contributing/#commit-message-format","title":"Commit Message Format","text":"<p>We follow a simplified version of Conventional Commits:</p> <ul> <li><code>feat</code>: A new feature</li> <li><code>fix</code>: A bug fix</li> <li><code>docs</code>: Documentation changes</li> <li><code>style</code>: Code style changes (formatting, etc.)</li> <li><code>refactor</code>: Code changes that neither fix bugs nor add features</li> <li><code>test</code>: Adding or updating tests</li> <li><code>chore</code>: Changes to the build process or auxiliary tools</li> </ul> <p>Example: <code>feat: add service testing feature</code></p>"},{"location":"development/contributing/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Create a pull request against the <code>dev</code> branch</li> <li>Ensure your code passes linting and tests</li> <li>Update documentation if needed</li> <li>Add a clear description of your changes</li> <li>Wait for code review and address any feedback</li> </ol>"},{"location":"development/contributing/#code-structure","title":"Code Structure","text":"<p>Understanding the codebase structure helps make better contributions:</p> <pre><code>openuptimes/\n\u251c\u2500\u2500 app/                # Next.js App Router\n\u2502   \u251c\u2500\u2500 api/            # API routes\n\u2502   \u251c\u2500\u2500 admin/          # Admin interface\n\u2502   \u251c\u2500\u2500 debug/          # Debug interfaces\n\u2502   \u2514\u2500\u2500 ...             # Other app pages\n\u251c\u2500\u2500 components/         # React components\n\u251c\u2500\u2500 hooks/              # Custom React hooks\n\u251c\u2500\u2500 lib/                # Utility functions and libraries\n\u2502   \u251c\u2500\u2500 redis/          # Redis-related utilities\n\u2502   \u251c\u2500\u2500 services/       # Service management\n\u2502   \u2514\u2500\u2500 ...             # Other utilities\n\u251c\u2500\u2500 public/             # Static assets\n\u2514\u2500\u2500 scripts/            # Build and helper scripts\n</code></pre>"},{"location":"development/contributing/#feature-requests-and-bug-reports","title":"Feature Requests and Bug Reports","text":"<ul> <li>Use the GitHub Issues section for bug reports and feature requests</li> <li>Search existing issues before creating a new one</li> <li>Provide as much information as possible when reporting bugs</li> <li>For feature requests, describe the proposed feature and its use case</li> </ul>"},{"location":"development/contributing/#documentation","title":"Documentation","text":"<p>Update documentation when adding or modifying features:</p> <ol> <li>Update relevant files in the <code>docs/</code> directory</li> <li>Update inline code comments for complex functionality</li> <li>Update the README.md if needed</li> </ol>"},{"location":"development/contributing/#community-guidelines","title":"Community Guidelines","text":"<ul> <li>Be respectful and inclusive</li> <li>Provide constructive feedback</li> <li>Help other contributors when possible</li> <li>Focus on the issue, not the person</li> </ul>"},{"location":"development/contributing/#license","title":"License","text":"<p>By contributing to OpenUptimes, you agree that your contributions will be licensed under the project's PolyForm Noncommercial License 1.0.0.</p>"},{"location":"development/contributing/#questions","title":"Questions?","text":"<p>If you have any questions, feel free to open an issue or reach out to the maintainers.</p> <p>Thank you for contributing to OpenUptimes! </p>"},{"location":"getting-started/configuration/","title":"Configuration","text":"<p>After installing OpenUptimes, you'll want to configure it to suit your needs. This page covers the various configuration options available.</p>"},{"location":"getting-started/configuration/#admin-dashboard","title":"Admin Dashboard","text":"<p>OpenUptimes provides an admin dashboard at <code>/admin</code> where you can easily configure all your services without touching any code.</p> <p>Through the admin dashboard, you can:</p> <ul> <li>Add new services to monitor</li> <li>Edit existing service configurations</li> <li>Delete services you no longer wish to monitor</li> <li>View monitoring history and statistics</li> <li>Configure GitHub Actions integration</li> </ul> <p></p>"},{"location":"getting-started/configuration/#service-configuration","title":"Service Configuration","text":"<p>Each service can be configured with:</p> Setting Description Default Name Display name for the service Required URL The URL to check Required Description Description of the service Optional Expected Status HTTP status code to expect 200 Method HTTP method to use GET Timeout Timeout in milliseconds 10000"},{"location":"getting-started/configuration/#adding-a-service","title":"Adding a Service","text":"<p>To add a new service:</p> <ol> <li>Navigate to the admin dashboard at <code>/admin</code></li> <li>Click the Add Service button</li> <li>Fill in the service details</li> <li>Click Save</li> </ol>"},{"location":"getting-started/configuration/#editing-a-service","title":"Editing a Service","text":"<p>To edit an existing service:</p> <ol> <li>Navigate to the admin dashboard at <code>/admin</code></li> <li>Find the service you want to edit</li> <li>Click the Edit button</li> <li>Update the service details</li> <li>Click Save</li> </ol>"},{"location":"getting-started/configuration/#deleting-a-service","title":"Deleting a Service","text":"<p>To delete a service:</p> <ol> <li>Navigate to the admin dashboard at <code>/admin</code></li> <li>Find the service you want to delete</li> <li>Click the Delete button</li> <li>Confirm the deletion</li> </ol>"},{"location":"getting-started/configuration/#environment-variables","title":"Environment Variables","text":"<p>OpenUptimes supports the following environment variables:</p> Variable Description Default Required <code>REDIS_URL</code> URL to your Redis instance - Yes <code>NEXT_PUBLIC_SITE_NAME</code> Name of your status page \"OpenUptimes\" No <code>NEXT_PUBLIC_SITE_DESCRIPTION</code> Short description \"Service Status Monitor\" No <code>NEXT_PUBLIC_REFRESH_INTERVAL</code> Refresh interval in ms 60000 No"},{"location":"getting-started/configuration/#setting-environment-variables","title":"Setting Environment Variables","text":""},{"location":"getting-started/configuration/#on-vercel","title":"On Vercel","text":"<ol> <li>Go to your project in the Vercel dashboard</li> <li>Click on Settings &gt; Environment Variables</li> <li>Add each environment variable and its value</li> <li>Click Save</li> <li>Redeploy your project for the changes to take effect</li> </ol>"},{"location":"getting-started/configuration/#self-hosted","title":"Self-Hosted","text":"<p>For local development or self-hosted deployment:</p> <ol> <li>Create or edit the <code>.env.local</code> file in the root directory</li> <li>Add each environment variable:</li> </ol> <pre><code>REDIS_URL=\"redis://username:password@host:port\"\nNEXT_PUBLIC_SITE_NAME=\"My Status Page\"\nNEXT_PUBLIC_SITE_DESCRIPTION=\"Service Status Monitor\"\nNEXT_PUBLIC_REFRESH_INTERVAL=60000\n</code></pre> <p>Warning</p> <p>Never commit your <code>.env.local</code> file to version control, as it may contain sensitive information.</p>"},{"location":"getting-started/configuration/#github-actions-configuration","title":"GitHub Actions Configuration","text":"<p>For GitHub Actions monitoring, you'll need to:</p> <ol> <li>Generate an API key through the admin dashboard</li> <li>Add the API key as a repository secret (named <code>PING_API_KEY</code> by default)</li> <li>Create a workflow file in your repository at <code>.github/workflows/ping.yml</code></li> </ol> <p>See the GitHub Actions Setup guide for detailed instructions.</p>"},{"location":"getting-started/configuration/#redis-configuration","title":"Redis Configuration","text":"<p>OpenUptimes uses Redis for data storage. Here are some Redis configuration tips:</p>"},{"location":"getting-started/configuration/#redis-connection-url-format","title":"Redis Connection URL Format","text":"<pre><code>redis[s]://[[username][:password]@][host][:port][/db-number]\n</code></pre>"},{"location":"getting-started/configuration/#redis-connection-examples","title":"Redis Connection Examples","text":"<ul> <li>Local: <code>redis://localhost:6379</code></li> <li>With auth: <code>redis://username:password@redis.example.com:6379</code></li> <li>With SSL: <code>rediss://username:password@redis.example.com:6379</code></li> </ul>"},{"location":"getting-started/configuration/#redis-memory-management","title":"Redis Memory Management","text":"<p>To prevent Redis from using too much memory, OpenUptimes implements automatic TTL (Time To Live) for historical data. By default, data is stored for 24 hours.</p> <p>You can configure the TTL in the admin dashboard under Debug &gt; Ping History.</p>"},{"location":"getting-started/configuration/#advanced-configuration","title":"Advanced Configuration","text":"<p>For advanced users, OpenUptimes offers additional configuration options:</p>"},{"location":"getting-started/configuration/#custom-api-integrations","title":"Custom API Integrations","text":"<p>You can integrate OpenUptimes with other monitoring tools by using the API endpoints:</p> <ul> <li>GET <code>/api/ping</code>: Trigger a check of all services</li> <li>GET <code>/api/status</code>: Get the current status of all services</li> <li>GET <code>/api/history/{serviceName}</code>: Get historical data for a specific service</li> </ul>"},{"location":"getting-started/configuration/#internal-cron-system","title":"Internal Cron System","text":"<p>OpenUptimes includes an internal cron system for more precise monitoring. This can be configured through the admin dashboard under Debug &gt; Ping Cron. </p>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>OpenUptimes offers multiple installation methods to fit your specific needs. Choose the approach that works best for you.</p>"},{"location":"getting-started/installation/#option-1-deploy-to-vercel-recommended","title":"Option 1: Deploy to Vercel (Recommended)","text":"<p>The easiest way to get started with OpenUptimes is to deploy directly to Vercel with our one-click deploy button.</p> Step 1: DeployStep 2: Configure settingsStep 3: Deploy <p>Visit the OpenUptimes repository and click the Deploy with Vercel button.</p> <p>Fill in the project name and connect your GitHub account.</p> <p>Leave all the default settings as they are.</p> <p>Click Deploy and wait for the deployment to complete.</p>"},{"location":"getting-started/installation/#setting-up-redis-on-vercel","title":"Setting up Redis on Vercel","text":"<p>Once your site is deployed, you'll need to add Redis for data storage:</p> <ol> <li>Go to your Vercel dashboard and open your newly deployed project</li> <li>Click on Storage in the left sidebar</li> <li>Click Add and select Vercel Redis</li> <li>Follow the prompts to create a new Redis database</li> <li>Once completed, Vercel will automatically add the Redis connection details to your project</li> </ol>"},{"location":"getting-started/installation/#option-2-self-hosted-deployment","title":"Option 2: Self-Hosted Deployment","text":"<p>For users who want more control over their deployment:</p>"},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Node.js 18 or later</li> <li>Redis database</li> <li>Git</li> </ul>"},{"location":"getting-started/installation/#installation-steps","title":"Installation Steps","text":"<ol> <li>Fork and clone the repository:</li> </ol> <pre><code>git clone https://github.com/jexxme/openuptimes.git\ncd openuptimes\n</code></pre> <ol> <li>Install dependencies:</li> </ol> <pre><code>npm install\n</code></pre> <ol> <li>Set up Redis:</li> <li>Install Redis locally: Redis Quick Start</li> <li>Or use Docker: <code>docker run -p 6379:6379 redis</code></li> <li> <p>Or use a managed Redis service like Upstash or Redis Cloud</p> </li> <li> <p>Create a <code>.env.local</code> file:</p> </li> </ol> <pre><code>REDIS_URL=redis://localhost:6379\nNEXT_PUBLIC_SITE_NAME=\"OpenUptimes\"\nNEXT_PUBLIC_SITE_DESCRIPTION=\"Service Status Monitor\"\nNEXT_PUBLIC_REFRESH_INTERVAL=60000\n</code></pre> <ol> <li>Run the development server:</li> </ol> <pre><code>npm run dev\n</code></pre> <ol> <li> <p>Navigate to <code>http://localhost:3000/admin</code> to configure your services</p> </li> <li> <p>For production, build and start:</p> </li> </ol> <pre><code>npm run build\nnpm run start\n</code></pre>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<p>After installation, you should:</p> <ol> <li>Set up GitHub Actions for monitoring</li> <li>Configure your services</li> <li>Customize your instance to match your brand</li> </ol> <p>Default Admin Access</p> <p>When you first access <code>/admin</code>, you'll be prompted to create an admin password. Keep this password safe as it's required for all administrative operations.</p> <p>Redis Connection</p> <p>Make sure your Redis connection is properly configured. You can test it by visiting the <code>/api/test-redis</code> endpoint on your deployed instance. </p>"},{"location":"getting-started/overview/","title":"Overview","text":"<p>Content Moved</p> <p>The content of this page has been moved to the Home page.</p> <p>You will be redirected automatically in 5 seconds.</p> <p></p> <p>Continue reading on the Home page...</p>"},{"location":"monitoring/","title":"Monitoring Options","text":"<p>OpenUptimes provides multiple ways to monitor your services, giving you flexibility in how you implement uptime checking based on your specific needs and deployment environment.</p>"},{"location":"monitoring/#available-monitoring-systems","title":"Available Monitoring Systems","text":"<p>OpenUptimes offers two primary monitoring systems:</p> <ol> <li>Internal Cron System: Built-in scheduler with precise timing control (down to 1-minute intervals)</li> <li>GitHub Actions: Reliable, external monitoring using GitHub's infrastructure</li> </ol> <p>Additionally, you can use External Monitoring solutions to supplement or replace the built-in options.</p>"},{"location":"monitoring/#choosing-the-right-system","title":"Choosing the Right System","text":"Feature Internal Cron GitHub Actions Minimum interval 1 minute 5 minutes Setup complexity Simple (UI-based) Moderate (requires workflow file) Infrastructure Uses your OpenUptimes instance Uses GitHub's infrastructure Execution history Detailed history with UI Basic logs in GitHub UI Scheduling precision High (follows exact cron syntax) Medium (5-minute minimum, variable execution) Resource usage Uses your instance resources Uses GitHub's resources Dependency Redis only GitHub platform Configuration UI-based management YAML file configuration Best for Self-hosted, non-serverless deployments Vercel/serverless deployments Reliability Depends on your hosting High (GitHub's infrastructure)"},{"location":"monitoring/#deployment-compatibility","title":"Deployment Compatibility","text":"<p>Different monitoring options are compatible with different hosting environments:</p> Hosting Type Internal Cron System GitHub Actions External Monitoring Traditional VPS/Servers \u2705 Fully supported \u2705 Supported \u2705 Supported Docker containers \u2705 Fully supported \u2705 Supported \u2705 Supported Vercel \u274c Not supported \u2705 Recommended \u2705 Supported Netlify \u274c Not supported \u2705 Recommended \u2705 Supported Other serverless \u274c Not supported \u2705 Recommended \u2705 Supported"},{"location":"monitoring/#monitoring-strategy-recommendations","title":"Monitoring Strategy Recommendations","text":""},{"location":"monitoring/#for-vercel-deployments","title":"For Vercel Deployments","text":"<p>If you're using Vercel or another serverless platform:</p> <ol> <li>Use GitHub Actions as your primary monitoring method</li> <li>Set up at least one workflow with a 5-minute interval</li> <li>Consider adding a second workflow with a different schedule for redundancy</li> </ol>"},{"location":"monitoring/#for-self-hosted-deployments","title":"For Self-Hosted Deployments","text":"<p>If you're running on a traditional server or VPS:</p> <ol> <li>Use the Internal Cron System as your primary monitoring method</li> <li>Configure jobs with varying intervals based on service importance</li> <li>Optionally add GitHub Actions as a backup monitoring method</li> </ol>"},{"location":"monitoring/#for-high-availability-requirements","title":"For High-Availability Requirements","text":"<p>If you need maximum reliability:</p> <ol> <li>Set up both monitoring systems simultaneously</li> <li>Configure different check intervals on each system</li> <li>Consider adding external monitoring services as a third layer</li> </ol>"},{"location":"monitoring/#getting-started","title":"Getting Started","text":"<p>To get started with monitoring:</p> <ol> <li>Choose the monitoring system that best fits your deployment</li> <li>Follow the setup instructions for your chosen system:</li> <li>Internal Cron System Setup</li> <li>GitHub Actions Setup</li> <li>Configure your services in the OpenUptimes admin dashboard</li> <li>Test your monitoring setup to ensure it's working correctly </li> </ol>"},{"location":"monitoring/cron-system/","title":"Internal Cron System","text":"<p>The internal cron system provides flexible and precise service monitoring without relying on external services. This system runs within your OpenUptimes instance, offering fine control over monitoring schedules.</p>"},{"location":"monitoring/cron-system/#overview","title":"Overview","text":"<p>The cron system is built on a Redis-backed job scheduler that works directly within your OpenUptimes application. It's designed for environments where you need:</p> <ul> <li>Precise monitoring intervals (down to 1 minute)</li> <li>Complete control over job scheduling</li> <li>Detailed execution history and analytics</li> <li>Independence from external services</li> </ul>"},{"location":"monitoring/cron-system/#architecture","title":"Architecture","text":"<p>The system consists of these components:</p> <ol> <li>Job Storage: Each cron job is stored in Redis with a unique identifier</li> <li>Job Scheduler: Background process that checks for jobs due to run</li> <li>Execution Engine: Executes ping checks based on job definitions</li> <li>History Tracker: Records execution details for auditing and analysis</li> <li>Management API: Allows creating, updating, and deleting jobs via REST endpoints</li> </ol>"},{"location":"monitoring/cron-system/#compatibility","title":"Compatibility","text":"<p>Not compatible with serverless platforms</p> <p>The internal cron system requires a persistent runtime environment and will not work on serverless platforms like Vercel or Netlify. If you're using a serverless platform, please use GitHub Actions monitoring instead.</p> <p>Compatible environments: - Traditional VPS/dedicated servers - Docker containers - Self-hosted environments - PaaS platforms with persistent runtimes</p>"},{"location":"monitoring/cron-system/#features","title":"Features","text":"<ul> <li>Flexible Scheduling: Standard cron syntax for precise scheduling control (e.g., <code>*/1 * * * *</code> for every minute)</li> <li>Job Management: Create, update, pause, resume, and delete jobs through the admin interface</li> <li>Execution History: Track every job execution with status, duration, and error details</li> <li>Redis Backend: Lightweight storage that keeps everything in memory for fast access</li> <li>Error Handling: Automatic error detection and reporting for job failures</li> <li>Execution Metrics: Performance tracking for each job execution</li> <li>Restart Recovery: Jobs persist across application restarts</li> <li>Zero External Dependencies: Runs entirely within your OpenUptimes instance</li> </ul>"},{"location":"monitoring/cron-system/#setup-and-configuration","title":"Setup and Configuration","text":""},{"location":"monitoring/cron-system/#creating-a-new-job","title":"Creating a New Job","text":"<ol> <li>Navigate to <code>/debug/ping/cron</code> in your OpenUptimes admin panel</li> <li>Click \"New Job\"</li> <li>Fill in the job details:</li> <li>Name: Descriptive name for the job (e.g., \"Every Minute Check\")</li> <li>Description: (Optional) Additional information about the job</li> <li>Cron Expression: Schedule in cron format (e.g., <code>*/1 * * * *</code> for every minute)</li> <li>Enabled: Toggle to activate/deactivate the job immediately</li> <li>Click \"Create Job\"</li> </ol>"},{"location":"monitoring/cron-system/#managing-existing-jobs","title":"Managing Existing Jobs","text":"<p>From the cron debug interface, you can:</p> <ul> <li>Start/Stop Jobs: Pause or resume any job</li> <li>Edit Jobs: Modify the name, description, schedule, or enabled status</li> <li>Delete Jobs: Remove jobs you no longer need</li> <li>Clone Jobs: Create a new job based on an existing configuration</li> <li>View History: See execution logs for each job</li> <li>View Metrics: Monitor performance metrics like execution time</li> </ul>"},{"location":"monitoring/cron-system/#understanding-cron-expressions","title":"Understanding Cron Expressions","text":"<p>Cron expressions follow the standard format with five fields:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 minute (0-59)\n\u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 hour (0-23)\n\u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 day of the month (1-31)\n\u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 month (1-12)\n\u2502 \u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 day of the week (0-6) (Sunday to Saturday)\n\u2502 \u2502 \u2502 \u2502 \u2502\n\u2502 \u2502 \u2502 \u2502 \u2502\n* * * * *\n</code></pre> <p>Common examples: - <code>* * * * *</code>: Every minute - <code>*/5 * * * *</code>: Every 5 minutes - <code>0 * * * *</code>: Every hour on the hour - <code>0 0 * * *</code>: Once a day at midnight - <code>0 0 * * 0</code>: Once a week on Sunday at midnight</p>"},{"location":"monitoring/cron-system/#best-practices","title":"Best Practices","text":""},{"location":"monitoring/cron-system/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Job Frequency: Be mindful of how frequently you schedule jobs. For most websites, checks every 1-5 minutes provide a good balance between timeliness and resource usage.</li> <li>Execution Time: Monitor how long your jobs take to execute. If they consistently take more than a few seconds, consider reducing the number of services or decreasing the frequency.</li> <li>Concurrent Jobs: The system can handle multiple concurrent jobs, but high concurrency may impact performance. Stagger job schedules when possible.</li> </ul>"},{"location":"monitoring/cron-system/#monitoring-strategy","title":"Monitoring Strategy","text":"<ul> <li>Tiered Approach: Consider a tiered monitoring strategy:</li> <li>Critical services: Check every minute</li> <li>Important services: Check every 5 minutes</li> <li>Non-critical services: Check every 15-30 minutes</li> <li>Business Hours: For internal tools, you may want more frequent checks during business hours and reduced frequency after hours.</li> </ul>"},{"location":"monitoring/cron-system/#troubleshooting","title":"Troubleshooting","text":""},{"location":"monitoring/cron-system/#jobs-not-running","title":"Jobs Not Running","text":"<p>If your cron jobs aren't executing as expected:</p> <ol> <li>Check the job status: Ensure the job is marked as \"running\" in the job list</li> <li>Verify Redis connection: Jobs require a functioning Redis connection</li> <li>Check cron expression: Validate that your cron expression is formatted correctly</li> <li>Review execution history: Look for errors or patterns in previous executions</li> <li>Verify server time: Ensure your server's time is correctly synchronized (NTP)</li> <li>Check for failed executions: Previous failures might have caused automatic disabling</li> </ol>"},{"location":"monitoring/cron-system/#performance-issues","title":"Performance Issues","text":"<p>If you notice slow performance:</p> <ol> <li>Reduce job frequency: Consider increasing the interval between job executions</li> <li>Limit concurrent jobs: Stagger job schedules to avoid resource contention</li> <li>Check service response times: Slow services may be impacting job execution time</li> <li>Monitor Redis performance: Ensure your Redis instance isn't under resource pressure</li> <li>Review job history size: Large history datasets may impact Redis performance</li> </ol>"},{"location":"monitoring/cron-system/#api-endpoints-for-cron-management","title":"API Endpoints for Cron Management","text":"<p>For programmatic cron job management, the following API endpoints are available:</p> <ul> <li>GET <code>/api/ping/cron</code>: List all cron jobs (or get a specific job with <code>?id=job_id</code>)</li> <li>POST <code>/api/ping/cron</code>: Create a new cron job</li> <li>PUT <code>/api/ping/cron</code>: Update an existing cron job</li> <li>DELETE <code>/api/ping/cron?id=job_id</code>: Delete a cron job</li> <li>GET <code>/api/ping/cron?id=job_id&amp;history=true</code>: Get execution history for a job</li> </ul> <p>All endpoints require authentication and accept/return JSON data. </p>"},{"location":"monitoring/external-monitoring/","title":"External Monitoring Options","text":"<p>While OpenUptimes provides built-in monitoring through the Internal Cron System and GitHub Actions, you can also use external monitoring tools for additional flexibility or precision.</p>"},{"location":"monitoring/external-monitoring/#overview","title":"Overview","text":"<p>OpenUptimes' ping endpoint is designed to be lightweight and accessible, making it easy to integrate with external monitoring services. This allows you to:</p> <ol> <li>Set custom monitoring intervals (down to seconds if needed)</li> <li>Monitor from multiple geographical locations</li> <li>Integrate with existing monitoring infrastructure</li> <li>Add redundancy to your monitoring setup</li> </ol>"},{"location":"monitoring/external-monitoring/#implementation-options","title":"Implementation Options","text":""},{"location":"monitoring/external-monitoring/#option-1-custom-cron-server","title":"Option 1: Custom Cron Server","text":"<p>If you have an existing server, you can set up a cron job to call your OpenUptimes ping endpoint at any interval:</p> <pre><code># Example crontab entry for checking every minute\n* * * * * curl -X GET \"https://your-domain.com/api/ping\" -H \"Authorization: Bearer YOUR_API_KEY\"\n\n# Example for every 30 seconds (using two cron entries)\n* * * * * curl -X GET \"https://your-domain.com/api/ping\" -H \"Authorization: Bearer YOUR_API_KEY\"\n* * * * * sleep 30 &amp;&amp; curl -X GET \"https://your-domain.com/api/ping\" -H \"Authorization: Bearer YOUR_API_KEY\"\n</code></pre>"},{"location":"monitoring/external-monitoring/#option-2-cloud-based-cron-services","title":"Option 2: Cloud-based Cron Services","text":"<p>Several cloud services provide cron-like functionality with more precision than GitHub Actions:</p> <ul> <li>EasyCron - Offers intervals as short as every minute</li> <li>Cron-job.org - Free service with 1-minute precision</li> <li>Cronhub - Monitoring and alerting for scheduled jobs</li> </ul>"},{"location":"monitoring/external-monitoring/#option-3-serverless-functions","title":"Option 3: Serverless Functions","text":"<p>You can deploy serverless functions on various platforms to call your ping endpoint:</p>"},{"location":"monitoring/external-monitoring/#aws-lambda-with-cloudwatch-events","title":"AWS Lambda with CloudWatch Events","text":"<pre><code>// Lambda function example\nexports.handler = async (event) =&gt; {\n  const https = require('https');\n\n  return new Promise((resolve, reject) =&gt; {\n    const req = https.request({\n      hostname: 'your-domain.com',\n      path: '/api/ping',\n      method: 'GET',\n      headers: {\n        'Authorization': 'Bearer YOUR_API_KEY'\n      }\n    }, (res) =&gt; {\n      let data = '';\n\n      res.on('data', (chunk) =&gt; {\n        data += chunk;\n      });\n\n      res.on('end', () =&gt; {\n        resolve({\n          statusCode: res.statusCode,\n          body: data\n        });\n      });\n    });\n\n    req.on('error', (e) =&gt; {\n      reject(e);\n    });\n\n    req.end();\n  });\n};\n</code></pre> <p>Set up a CloudWatch Event Rule to trigger this function at your desired interval.</p>"},{"location":"monitoring/external-monitoring/#google-cloud-functions-with-cloud-scheduler","title":"Google Cloud Functions with Cloud Scheduler","text":"<pre><code>exports.pingOpenUptimes = (req, res) =&gt; {\n  const https = require('https');\n\n  const options = {\n    hostname: 'your-domain.com',\n    path: '/api/ping',\n    method: 'GET',\n    headers: {\n      'Authorization': 'Bearer YOUR_API_KEY'\n    }\n  };\n\n  const req = https.request(options, (response) =&gt; {\n    let data = '';\n\n    response.on('data', (chunk) =&gt; {\n      data += chunk;\n    });\n\n    response.on('end', () =&gt; {\n      res.status(200).send(`Ping completed: ${data}`);\n    });\n  });\n\n  req.on('error', (e) =&gt; {\n    res.status(500).send(`Error: ${e.message}`);\n  });\n\n  req.end();\n};\n</code></pre> <p>Create a Cloud Scheduler job to call this function at your desired interval.</p>"},{"location":"monitoring/external-monitoring/#option-4-integration-with-existing-monitoring-systems","title":"Option 4: Integration with Existing Monitoring Systems","text":"<p>Many monitoring platforms allow you to add HTTP endpoints to check:</p> <ul> <li>Uptime Robot - Free tier supports 5-minute checks</li> <li>Pingdom - Commercial service with advanced features</li> <li>StatusCake - Offers various check types and frequencies</li> <li>Better Uptime - Provides status pages and on-call scheduling</li> </ul>"},{"location":"monitoring/external-monitoring/#authentication","title":"Authentication","text":"<p>When calling the ping endpoint from external services, you'll need to authenticate using the same API key system used for GitHub Actions:</p> <pre><code>Authorization: Bearer YOUR_API_KEY\n</code></pre> <p>Generate and manage API keys in your OpenUptimes admin dashboard.</p>"},{"location":"monitoring/external-monitoring/#best-practices","title":"Best Practices","text":""},{"location":"monitoring/external-monitoring/#regional-distribution","title":"Regional Distribution","text":"<p>For global services, consider running ping checks from multiple regions to detect regional outages:</p> <ol> <li>Set up monitoring in North America, Europe, and Asia</li> <li>Use different cloud providers for redundancy</li> <li>Compare response times across regions</li> </ol>"},{"location":"monitoring/external-monitoring/#monitoring-frequency","title":"Monitoring Frequency","text":"<p>Choose an appropriate monitoring frequency:</p> <ul> <li>30 seconds: For critical systems requiring immediate detection</li> <li>1 minute: For important services with time-sensitive operations</li> <li>5 minutes: For general website monitoring (standard GitHub Actions interval)</li> <li>15+ minutes: For non-critical internal services</li> </ul>"},{"location":"monitoring/external-monitoring/#staggered-checks","title":"Staggered Checks","text":"<p>When implementing multiple monitoring systems, stagger the check times to get more frequent coverage:</p> <ul> <li>System A: Check at :00, :05, :10, :15, etc.</li> <li>System B: Check at :02, :07, :12, :17, etc.</li> <li>System C: Check at :04, :09, :14, :19, etc.</li> </ul> <p>This provides more data points without overloading your ping endpoint.</p>"},{"location":"monitoring/external-monitoring/#ping-endpoint-details","title":"Ping Endpoint Details","text":"<p>When making requests to the ping endpoint:</p> <p>Endpoint: <code>GET /api/ping</code></p> <p>Required Headers: - <code>Authorization: Bearer YOUR_API_KEY</code></p> <p>Optional Parameters: - <code>source</code>: String identifier for your monitoring system - <code>runId</code>: Unique identifier for this specific check</p> <p>Response: JSON containing service status results and execution details</p> <pre><code>{\n  \"status\": \"success\",\n  \"timestamp\": 1647456789012,\n  \"nextPing\": 1647456849012,\n  \"refreshInterval\": 60000,\n  \"executionTime\": 1234,\n  \"results\": [\n    {\n      \"name\": \"Website\",\n      \"status\": \"up\",\n      \"responseTime\": 345\n    },\n    {\n      \"name\": \"API\",\n      \"status\": \"up\",\n      \"responseTime\": 567\n    }\n  ]\n}\n</code></pre>"},{"location":"monitoring/github-actions/","title":"GitHub Actions Monitoring","text":"<p>GitHub Actions provides a reliable, maintenance-free way to monitor your services in OpenUptimes. This approach eliminates the need for dedicated servers or complex cron job setups.</p>"},{"location":"monitoring/github-actions/#overview","title":"Overview","text":"<p>The GitHub Actions monitoring system works by:</p> <ol> <li>Running a scheduled workflow in your GitHub repository</li> <li>Calling your OpenUptimes instance's ping API endpoint at regular intervals</li> <li>Checking the status of all your configured services</li> <li>Updating their status in Redis</li> <li>Displaying the results on your status page</li> </ol>"},{"location":"monitoring/github-actions/#compatibility","title":"Compatibility","text":"<p>GitHub Actions monitoring is compatible with all deployment types:</p> <ul> <li>Serverless platforms (Vercel, Netlify, etc.)</li> <li>Traditional servers and VPS</li> <li>Docker containers</li> <li>Self-hosted environments</li> </ul> <p>Recommended for serverless deployments</p> <p>If you're deploying on Vercel or another serverless platform, GitHub Actions is the recommended monitoring method since the internal cron system won't work in those environments.</p>"},{"location":"monitoring/github-actions/#features","title":"Features","text":"<ul> <li>Zero infrastructure: Uses GitHub's servers to run checks</li> <li>Reliable scheduling: Backed by GitHub's infrastructure</li> <li>Simple setup: Just a single workflow file</li> <li>Built-in history: GitHub stores logs of all runs</li> <li>Manual trigger option: Run checks on-demand through GitHub interface</li> <li>Familiar workflow: Uses standard GitHub Actions syntax</li> </ul>"},{"location":"monitoring/github-actions/#setup-instructions","title":"Setup Instructions","text":""},{"location":"monitoring/github-actions/#1-generate-an-api-key","title":"1. Generate an API Key","text":"<ol> <li>Log in to your OpenUptimes admin dashboard</li> <li>Navigate to the GitHub Actions setup page</li> <li>Generate a new API key (or use an existing one)</li> <li>Copy the key for the next step</li> </ol>"},{"location":"monitoring/github-actions/#2-configure-github-repository-secrets","title":"2. Configure GitHub Repository Secrets","text":"<ol> <li>Go to your GitHub repository that contains OpenUptimes</li> <li>Navigate to Settings &gt; Secrets and variables &gt; Actions</li> <li>Click New repository secret</li> <li>Create a secret named <code>PING_API_KEY</code> with your API key as the value</li> <li>Click Add secret</li> </ol>"},{"location":"monitoring/github-actions/#3-create-the-workflow-file","title":"3. Create the Workflow File","text":"<p>Create a file at <code>.github/workflows/ping.yml</code> in your repository with the following content:</p> <pre><code>name: OpenUptimes Ping Check\n\non:\n  schedule:\n    # Runs every 5 minutes\n    - cron: '*/5 * * * *'\n  workflow_dispatch:  # Allows manual triggering\n\njobs:\n  ping:\n    name: Ping Service Check\n    runs-on: ubuntu-latest\n    steps:\n      - name: Perform Ping\n        run: |\n          curl -X GET \"${{ secrets.APP_URL }}/api/ping\" \\\n          -H \"Authorization: Bearer ${{ secrets.PING_API_KEY }}\" \\\n          -H \"User-Agent: GitHub-Actions-OpenUptimes\" \\\n          -H \"Content-Type: application/json\" \\\n          --fail\n        env:\n          APP_URL: ${{ vars.APP_URL || 'https://your-openuptimes-url.com' }}\n</code></pre>"},{"location":"monitoring/github-actions/#4-configure-repository-variables","title":"4. Configure Repository Variables","text":"<ol> <li>In your repository, go to Settings &gt; Secrets and variables &gt; Actions</li> <li>Click on the Variables tab</li> <li>Click New repository variable</li> <li>Create a variable named <code>APP_URL</code> with the URL of your OpenUptimes instance</li> <li>Click Add variable</li> </ol>"},{"location":"monitoring/github-actions/#5-enable-in-application","title":"5. Enable in Application","text":"<ol> <li>In your OpenUptimes admin dashboard, go to the monitoring settings</li> <li>Enable GitHub Actions monitoring</li> <li>Configure any additional settings as needed</li> </ol>"},{"location":"monitoring/github-actions/#schedule-configuration","title":"Schedule Configuration","text":"<p>GitHub Actions uses standard cron syntax for scheduling. The minimum interval is 5 minutes.</p> <p>Some example schedules:</p> <ul> <li><code>*/5 * * * *</code>: Every 5 minutes (recommended)</li> <li><code>*/15 * * * *</code>: Every 15 minutes</li> <li><code>0 * * * *</code>: Every hour at minute 0</li> <li><code>0 */2 * * *</code>: Every 2 hours</li> </ul> <p>GitHub scheduling limitations</p> <p>GitHub Actions schedules are not guaranteed to run at the exact specified time. There may be delays, especially during periods of high GitHub usage. For more precise timing, consider the internal cron system if you're on a compatible hosting platform.</p>"},{"location":"monitoring/github-actions/#manual-triggers","title":"Manual Triggers","text":"<p>You can manually trigger a check at any time:</p> <ol> <li>Go to the Actions tab in your GitHub repository</li> <li>Select the \"OpenUptimes Ping Check\" workflow</li> <li>Click Run workflow</li> <li>Select the branch and click Run workflow again</li> </ol>"},{"location":"monitoring/github-actions/#viewing-run-history","title":"Viewing Run History","text":"<p>To see the history of all ping checks:</p> <ol> <li>Go to the Actions tab in your GitHub repository</li> <li>Click on the \"OpenUptimes Ping Check\" workflow</li> <li>View the list of all workflow runs with their status and timestamps</li> </ol>"},{"location":"monitoring/github-actions/#troubleshooting","title":"Troubleshooting","text":""},{"location":"monitoring/github-actions/#common-issues","title":"Common Issues","text":""},{"location":"monitoring/github-actions/#workflow-not-running","title":"Workflow Not Running","text":"<p>If your workflow isn't running on schedule:</p> <ol> <li>Verify the workflow file is properly formatted</li> <li>Check that GitHub Actions is enabled for your repository</li> <li>Check if your GitHub account has available action minutes (for private repositories)</li> <li>GitHub may disable scheduled workflows for repositories with no recent activity</li> </ol>"},{"location":"monitoring/github-actions/#authentication-failures","title":"Authentication Failures","text":"<p>If you see 401 (Unauthorized) errors:</p> <ol> <li>Verify the <code>PING_API_KEY</code> secret matches the key in your OpenUptimes instance</li> <li>Check that the key is being properly passed in the Authorization header</li> </ol>"},{"location":"monitoring/github-actions/#connection-failures","title":"Connection Failures","text":"<p>If you see connection errors:</p> <ol> <li>Verify that the <code>APP_URL</code> is correct and accessible from the internet</li> <li>Check that your OpenUptimes instance is running</li> <li>Ensure there are no firewalls blocking GitHub's IPs</li> </ol>"},{"location":"monitoring/github-actions/#api-integration-details","title":"API Integration Details","text":"<p>The GitHub Actions workflow calls your ping API endpoint with:</p> <ul> <li>Method: GET</li> <li>Path: <code>/api/ping</code></li> <li>Headers:</li> <li><code>Authorization: Bearer {your-api-key}</code></li> <li><code>User-Agent: GitHub-Actions-OpenUptimes</code></li> <li><code>Content-Type: application/json</code></li> </ul> <p>The API automatically: - Records the GitHub Actions run ID - Adds the ping to the history - Updates the status of all services - Returns a detailed response with timing information </p>"}]}